{"ast":null,"code":"import _slicedToArray from \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nRows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.nCols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x); //Flip initial cell\n\n      flipCell(y, x - 1); //flip left\n\n      flipCell(y, x + 1); //flip right\n\n      flipCell(y - 1, x); //flip below\n\n      flipCell(y + 1, x); //flip above\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = false;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nRows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 18\n            }\n          }));\n        };\n\n        for (var x = 0; x < this.props.nCols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nRows: 5,\n  nCols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/siddhant/Desktop/React/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nRows","row","x","nCols","push","Math","random","chanceLightStartsOn","coord","ncols","nrows","split","map","Number","flipCell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.25\n\n  };\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0; y<this.props.nRows; y++){\n      let row = [];\n      for(let x=0; x<this.props.nCols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = false;\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let tblBoard=[];\n    for(let y=0;y<this.props.nRows;y++){\n      let row=[];\n      for(let x=0;x<this.props.nCols;x++){\n        let coord = `${y}-${x}`;\n        row.push(<Cell \n                      key={coord} \n                      isLit={this.state.board[y][x]}\n                      flipCellsAroundMe={()=>this.flipCellsAround(coord)}\n                  />)\n      }\n      \n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return(\n      <table className=\"Board\">\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}